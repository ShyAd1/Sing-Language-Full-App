import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { ProgressService } from '../services/progress.service';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';

interface VideoItem {
  id: string;
  title: string;
  thumbnail: string;
  videoUrl: string;
  description: string;
  videoType?: 'youtube' | 'vimeo' | 'mp4' | 'local'; // Tipo de video
  duration?: string; // Duraci√≥n del video (opcional)
}

interface LessonData {
  id: string;
  name: string;
  icon: string;
  description: string;
  explanation: string;
  videos: VideoItem[];
}

interface TestQuestion {
  id: string;
  type: 'gesture' | 'multiple-choice' | 'matching' | 'sequence';
  question: string;
  instruction: string;
  options?: string[];
  correctAnswer?: string | number;
  gestureToDetect?: string;
  expectedIcon?: string;
  referenceVideo?: VideoItem; // Video de referencia para mostrar la se√±a
  points: number;
}

interface TestSession {
  currentQuestionIndex: number;
  totalQuestions: number;
  score: number;
  maxScore: number;
  isActive: boolean;
  isCompleted: boolean;
  questions: TestQuestion[];
}

@Component({
  selector: 'app-lesson-detail',
  imports: [CommonModule, FormsModule],
  templateUrl: './lesson-detail.html',
  styleUrl: './lesson-detail.css'
})
export class LessonDetail implements OnInit, OnDestroy {
  // Hacer Math disponible en el template
  Math = Math;
  
  currentLesson: LessonData | null = null;
  selectedVideo: VideoItem | null = null;
  showVideoModal = false;
  playerName = localStorage.getItem('userEmail') || 'JUGADOR';

  // Sistema de pruebas
  testSession: TestSession | null = null;
  showTestModal = false;
  currentQuestion: TestQuestion | null = null;
  selectedAnswer: string | number | null = null;
  showCameraModal = false;
  cameraStream: MediaStream | null = null;
  gestureDetected = false;
  cameraError = '';
  testFeedback = '';
  isAnswerSubmitted = false;
  showInlineVideo = false; // Controla el video inline en las preguntas
  hasViewedReferenceVideo = false; // Controla si el usuario ha visto el video de referencia

  // Datos de las lecciones
  lessonsData: { [key: string]: LessonData } = {
    abecedario: {
      id: 'abecedario',
      name: 'ABECEDARIO',
      icon: 'üî§',
      description: 'Aprende las se√±as del alfabeto',
      explanation: 'En esta lecci√≥n aprender√°s las 27 letras del alfabeto en lengua de se√±as. Cada letra tiene su propia se√±a √∫nica que se forma con las manos. Practica cada letra hasta que puedas formar palabras completas.',
      videos: [
        { 
          id: 'a', 
          title: 'Letra A', 
          thumbnail: 'A', 
          videoUrl: '/letras/A.mp4', 
          description: 'Se√±a para la letra A - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'b', 
          title: 'Letra B', 
          thumbnail: 'B', 
          videoUrl: '/letras/B.mp4', 
          description: 'Se√±a para la letra B - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'c', 
          title: 'Letra C', 
          thumbnail: 'C', 
          videoUrl: '/letras/C.mp4', 
          description: 'Se√±a para la letra C - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'd', 
          title: 'Letra D', 
          thumbnail: 'D', 
          videoUrl: '/letras/D.mp4', 
          description: 'Se√±a para la letra D - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'e', 
          title: 'Letra E', 
          thumbnail: 'E', 
          videoUrl: '/letras/E.mp4', 
          description: 'Se√±a para la letra E - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'f', 
          title: 'Letra F', 
          thumbnail: 'F', 
          videoUrl: '/letras/F.mp4', 
          description: 'Se√±a para la letra F - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'g', 
          title: 'Letra G', 
          thumbnail: 'G', 
          videoUrl: '/letras/G.mp4', 
          description: 'Se√±a para la letra G - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'h', 
          title: 'Letra H', 
          thumbnail: 'H', 
          videoUrl: '/letras/H.mp4', 
          description: 'Se√±a para la letra H - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: 'i', 
          title: 'Letra I', 
          thumbnail: 'I', 
          videoUrl: '/letras/I.mp4', 
          description: 'Se√±a para la letra I - Video real',
          videoType: 'mp4',
          duration: '0:03'
        }
      ]
    },
    numeros: {
      id: 'numeros',
      name: 'N√öMEROS',
      icon: 'üî¢',
      description: 'Se√±as para n√∫meros del 1 al 9',
      explanation: 'Los n√∫meros en lengua de se√±as son fundamentales para la comunicaci√≥n. Aprender√°s a se√±ar del 1 al 9 y c√≥mo combinarlos para formar n√∫meros m√°s grandes.',
      videos: [
        { 
          id: '1', 
          title: 'N√∫mero 1', 
          thumbnail: '1Ô∏è‚É£', 
          videoUrl: '/numeros/Uno.mp4', 
          description: 'Se√±a para el n√∫mero 1 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '2', 
          title: 'N√∫mero 2', 
          thumbnail: '2Ô∏è‚É£', 
          videoUrl: '/numeros/Dos.mp4', 
          description: 'Se√±a para el n√∫mero 2 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '3', 
          title: 'N√∫mero 3', 
          thumbnail: '3Ô∏è‚É£', 
          videoUrl: '/numeros/Tres.mp4', 
          description: 'Se√±a para el n√∫mero 3 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '4', 
          title: 'N√∫mero 4', 
          thumbnail: '4Ô∏è‚É£', 
          videoUrl: '/numeros/Cuatro.mp4', 
          description: 'Se√±a para el n√∫mero 4 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '5', 
          title: 'N√∫mero 5', 
          thumbnail: '5Ô∏è‚É£', 
          videoUrl: '/numeros/Cinco.mp4', 
          description: 'Se√±a para el n√∫mero 5 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '6', 
          title: 'N√∫mero 6', 
          thumbnail: '6Ô∏è‚É£', 
          videoUrl: '/numeros/Seis.mp4', 
          description: 'Se√±a para el n√∫mero 6 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '7', 
          title: 'N√∫mero 7', 
          thumbnail: '7Ô∏è‚É£', 
          videoUrl: '/numeros/Siete.mp4', 
          description: 'Se√±a para el n√∫mero 7 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '8', 
          title: 'N√∫mero 8', 
          thumbnail: '8Ô∏è‚É£', 
          videoUrl: '/numeros/Ocho.mp4', 
          description: 'Se√±a para el n√∫mero 8 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        },
        { 
          id: '9', 
          title: 'N√∫mero 9', 
          thumbnail: '9Ô∏è‚É£', 
          videoUrl: '/numeros/Nueve.mp4', 
          description: 'Se√±a para el n√∫mero 9 - Video real',
          videoType: 'mp4',
          duration: '0:03'
        }
      ]
    },
    colores: {
      id: 'colores',
      name: 'COLORES',
      icon: 'üé®',
      description: 'Aprende los colores b√°sicos',
      explanation: 'Los colores son esenciales en la comunicaci√≥n diaria. En esta lecci√≥n aprender√°s las se√±as para los colores m√°s comunes y c√≥mo usarlos en conversaciones.',
      videos: [
        { id: 'rojo', title: 'Color Rojo', thumbnail: 'üî¥', videoUrl: '', description: 'Se√±a para el color rojo' },
        { id: 'azul', title: 'Color Azul', thumbnail: 'üîµ', videoUrl: '', description: 'Se√±a para el color azul' },
        { id: 'verde', title: 'Color Verde', thumbnail: 'üü¢', videoUrl: '', description: 'Se√±a para el color verde' },
        { id: 'amarillo', title: 'Color Amarillo', thumbnail: 'üü°', videoUrl: '', description: 'Se√±a para el color amarillo' },
        { id: 'naranja', title: 'Color Naranja', thumbnail: 'üü†', videoUrl: '', description: 'Se√±a para el color naranja' },
        { id: 'morado', title: 'Color Morado', thumbnail: 'üü£', videoUrl: '', description: 'Se√±a para el color morado' },
        { id: 'rosa', title: 'Color Rosa', thumbnail: '', videoUrl: '', description: 'Se√±a para el color rosa' },
        { id: 'negro', title: 'Color Negro', thumbnail: '‚ö´', videoUrl: '', description: 'Se√±a para el color negro' },
        { id: 'blanco', title: 'Color Blanco', thumbnail: '‚ö™', videoUrl: '', description: 'Se√±a para el color blanco' }
      ]
    },
    alimentos: {
      id: 'alimentos',
      name: 'ALIMENTOS',
      icon: 'üçé',
      description: 'Comidas y bebidas comunes',
      explanation: 'La comida es un tema universal de conversaci√≥n. Aprende las se√±as para alimentos b√°sicos que usas todos los d√≠as y podr√°s comunicarte sobre tus comidas favoritas.',
      videos: [
        { id: 'agua', title: 'Agua', thumbnail: 'üíß', videoUrl: '', description: 'Se√±a para agua' },
        { id: 'pan', title: 'Pan', thumbnail: 'üçû', videoUrl: '', description: 'Se√±a para pan' },
        { id: 'leche', title: 'Leche', thumbnail: 'ü•õ', videoUrl: '', description: 'Se√±a para leche' },
        { id: 'manzana', title: 'Manzana', thumbnail: 'üçé', videoUrl: '', description: 'Se√±a para manzana' },
        { id: 'cafe', title: 'Caf√©', thumbnail: '‚òï', videoUrl: '', description: 'Se√±a para caf√©' },
        { id: 'pizza', title: 'Pizza', thumbnail: 'üçï', videoUrl: '', description: 'Se√±a para pizza' },
        { id: 'pollo', title: 'Pollo', thumbnail: 'üçó', videoUrl: '', description: 'Se√±a para pollo' },
        { id: 'arroz', title: 'Arroz', thumbnail: 'üçö', videoUrl: '', description: 'Se√±a para arroz' },
        { id: 'huevo', title: 'Huevo', thumbnail: 'ü•ö', videoUrl: '', description: 'Se√±a para huevo' }
      ]
    },
    pronombres: {
      id: 'pronombres',
      name: 'PRONOMBRES',
      icon: 'üë§',
      description: 'Yo, t√∫, √©l, ella, nosotros',
      explanation: 'Los pronombres son la base de cualquier conversaci√≥n. Son las palabras que usamos para referirnos a personas sin decir sus nombres. Domina estos conceptos b√°sicos.',
      videos: [
        { id: 'yo', title: 'Yo', thumbnail: 'üëÜ', videoUrl: '', description: 'Se√±a para yo' },
        { id: 'tu', title: 'T√∫', thumbnail: 'üëâ', videoUrl: '', description: 'Se√±a para t√∫' },
        { id: 'el', title: '√âl', thumbnail: 'üë®', videoUrl: '', description: 'Se√±a para √©l' },
        { id: 'ella', title: 'Ella', thumbnail: 'üë©', videoUrl: '', description: 'Se√±a para ella' },
        { id: 'nosotros', title: 'Nosotros', thumbnail: 'üë•', videoUrl: '', description: 'Se√±a para nosotros' },
        { id: 'ustedes', title: 'Ustedes', thumbnail: 'üë´', videoUrl: '', description: 'Se√±a para ustedes' },
        { id: 'ellos', title: 'Ellos', thumbnail: 'üë®‚Äçüë®‚Äçüë¶', videoUrl: '', description: 'Se√±a para ellos' },
        { id: 'ellas', title: 'Ellas', thumbnail: 'üë©‚Äçüë©‚Äçüëß', videoUrl: '', description: 'Se√±a para ellas' },
        { id: 'quien', title: '¬øQui√©n?', thumbnail: '‚ùì', videoUrl: '', description: 'Se√±a para qui√©n' }
      ]
    },
    familia: {
      id: 'familia',
      name: 'FAMILIA',
      icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      description: 'Miembros de la familia',
      explanation: 'La familia es lo m√°s importante. Aprende a se√±ar los diferentes miembros de tu familia para poder hablar sobre las personas que m√°s quieres.',
      videos: [
        { id: 'mama', title: 'Mam√°', thumbnail: 'üë©', videoUrl: '', description: 'Se√±a para mam√°' },
        { id: 'papa', title: 'Pap√°', thumbnail: 'üë®', videoUrl: '', description: 'Se√±a para pap√°' },
        { id: 'hijo', title: 'Hijo', thumbnail: 'üë¶', videoUrl: '', description: 'Se√±a para hijo' },
        { id: 'hija', title: 'Hija', thumbnail: 'üëß', videoUrl: '', description: 'Se√±a para hija' },
        { id: 'hermano', title: 'Hermano', thumbnail: 'üë®‚Äçü¶±', videoUrl: '', description: 'Se√±a para hermano' },
        { id: 'hermana', title: 'Hermana', thumbnail: 'üë©‚Äçü¶±', videoUrl: '', description: 'Se√±a para hermana' },
        { id: 'abuelo', title: 'Abuelo', thumbnail: 'üë¥', videoUrl: '', description: 'Se√±a para abuelo' },
        { id: 'abuela', title: 'Abuela', thumbnail: 'üëµ', videoUrl: '', description: 'Se√±a para abuela' },
        { id: 'bebe', title: 'Beb√©', thumbnail: 'üë∂', videoUrl: '', description: 'Se√±a para beb√©' }
      ]
    }
  };

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private progressService: ProgressService,
    private sanitizer: DomSanitizer
  ) {}

  ngOnInit() {
    this.route.params.subscribe(params => {
      const lessonId = params['id'];
      this.currentLesson = this.lessonsData[lessonId] || null;

      if (!this.currentLesson) {
        // Si la lecci√≥n no existe, volver al nivel b√°sico
        this.goBack();
      }
    });
  }

  openVideoModal(video: VideoItem) {
    this.selectedVideo = video;
    this.showVideoModal = true;
    console.log(`üé• Abriendo video: ${video.title}`);
  }

  closeVideoModal() {
    this.showVideoModal = false;
    this.selectedVideo = null;
  }

  startTest() {
    if (this.currentLesson) {
      console.log(`üß™ Iniciando prueba para: ${this.currentLesson.id}`);
      this.generateTestQuestions();
      this.showTestModal = true;
      this.startTestSession();
    }
  }

  // Generar preguntas de prueba basadas en la lecci√≥n
  generateTestQuestions() {
    if (!this.currentLesson) return;

    const questions: TestQuestion[] = [];
    const videos = this.currentLesson.videos;

    // Generar diferentes tipos de preguntas
    for (let i = 0; i < Math.min(videos.length, 6); i++) {
      const video = videos[i];
      
      if (i % 3 === 0) {
        // Pregunta de detecci√≥n de gesto
        questions.push({
          id: `gesture_${i}`,
          type: 'gesture',
          question: `Realiza la se√±a para: ${video.title}`,
          instruction: 'Col√≥cate frente a la c√°mara y realiza la se√±a correctamente',
          gestureToDetect: video.id,
          expectedIcon: video.thumbnail,
          points: 20
        });
      } else if (i % 3 === 1) {
        // Pregunta de opci√≥n m√∫ltiple
        const wrongOptions = this.getRandomWrongOptions(video, videos);
        questions.push({
          id: `multiple_${i}`,
          type: 'multiple-choice',
          question: `Observa el video y selecciona la se√±a correcta`,
          instruction: 'Mira el video de referencia y elige la opci√≥n que corresponde',
          options: [video.thumbnail, ...wrongOptions].sort(() => Math.random() - 0.5),
          correctAnswer: video.thumbnail,
          referenceVideo: video, // Agregar el video de referencia
          points: 10
        });
      } else {
        // Pregunta de secuencia o matching
        questions.push({
          id: `matching_${i}`,
          type: 'matching',
          question: `Observa el video y selecciona su significado`,
          instruction: 'Mira el video de referencia y elige el significado correcto',
          options: [video.title, ...this.getRandomWrongTitles(video, videos)].sort(() => Math.random() - 0.5),
          correctAnswer: video.title,
          referenceVideo: video, // Agregar el video de referencia
          points: 15
        });
      }
    }

    this.testSession = {
      currentQuestionIndex: 0,
      totalQuestions: questions.length,
      score: 0,
      maxScore: questions.reduce((sum, q) => sum + q.points, 0),
      isActive: true,
      isCompleted: false,
      questions: questions
    };
  }

  // Obtener opciones incorrectas aleatorias
  getRandomWrongOptions(correctVideo: VideoItem, allVideos: VideoItem[]): string[] {
    const wrongOptions = allVideos
      .filter(v => v.id !== correctVideo.id)
      .map(v => v.thumbnail)
      .sort(() => Math.random() - 0.5)
      .slice(0, 3);
    return wrongOptions;
  }

  getRandomWrongTitles(correctVideo: VideoItem, allVideos: VideoItem[]): string[] {
    const wrongTitles = allVideos
      .filter(v => v.id !== correctVideo.id)
      .map(v => v.title)
      .sort(() => Math.random() - 0.5)
      .slice(0, 3);
    return wrongTitles;
  }

  // Iniciar sesi√≥n de prueba
  startTestSession() {
    if (this.testSession && this.testSession.questions.length > 0) {
      this.currentQuestion = this.testSession.questions[0];
      this.selectedAnswer = null;
      this.isAnswerSubmitted = false;
      this.testFeedback = '';
      this.hasViewedReferenceVideo = false;
      
      // Auto-mostrar video de referencia para preguntas de opci√≥n m√∫ltiple y matching
      this.autoShowReferenceVideo();
    }
  }

  // Seleccionar respuesta en preguntas de opci√≥n m√∫ltiple
  selectAnswer(answer: string | number) {
    // Para preguntas de opci√≥n m√∫ltiple y matching, requerir que se haya visto el video
    if (this.currentQuestion && 
        (this.currentQuestion.type === 'multiple-choice' || this.currentQuestion.type === 'matching') &&
        this.currentQuestion.referenceVideo && 
        !this.hasViewedReferenceVideo) {
      console.log('‚ö†Ô∏è Debes ver el video de referencia antes de responder');
      return;
    }
    
    this.selectedAnswer = answer;
  }

  // Enviar respuesta actual
  submitAnswer() {
    if (!this.testSession || !this.currentQuestion) return;

    this.isAnswerSubmitted = true;
    let isCorrect = false;

    if (this.currentQuestion.type === 'multiple-choice' || this.currentQuestion.type === 'matching') {
      isCorrect = this.selectedAnswer === this.currentQuestion.correctAnswer;
    } else if (this.currentQuestion.type === 'gesture') {
      isCorrect = this.gestureDetected; // Simulado por ahora
    }

    if (isCorrect) {
      this.testSession.score += this.currentQuestion.points;
      this.testFeedback = '‚úÖ ¬°Correcto! Excelente trabajo';
    } else {
      this.testFeedback = '‚ùå Incorrecto. La respuesta correcta era: ' + this.currentQuestion.correctAnswer;
    }

    // Avanzar a la siguiente pregunta despu√©s de 2 segundos
    setTimeout(() => {
      this.nextQuestion();
    }, 2000);
  }

  // Avanzar a la siguiente pregunta
  nextQuestion() {
    if (!this.testSession) return;

    // Cerrar video inline antes de cambiar de pregunta
    this.showInlineVideo = false;

    this.testSession.currentQuestionIndex++;
    
    if (this.testSession.currentQuestionIndex >= this.testSession.totalQuestions) {
      this.completeTest();
    } else {
      this.currentQuestion = this.testSession.questions[this.testSession.currentQuestionIndex];
      this.selectedAnswer = null;
      this.isAnswerSubmitted = false;
      this.testFeedback = '';
      this.gestureDetected = false;
      this.hasViewedReferenceVideo = false;
      
      // Auto-mostrar video de referencia para preguntas de opci√≥n m√∫ltiple y matching
      this.autoShowReferenceVideo();
      
      console.log(`üîÑ Avanzando a pregunta ${this.testSession.currentQuestionIndex + 1} de ${this.testSession.totalQuestions}`);
    }
  }

  // Completar la prueba
  completeTest() {
    if (!this.testSession) return;

    this.testSession.isCompleted = true;
    this.testSession.isActive = false;
    
    const percentage = (this.testSession.score / this.testSession.maxScore) * 100;
    let message = '';

    if (percentage >= 80) {
      message = 'üèÜ ¬°Excelente! Has dominado esta lecci√≥n';
    } else if (percentage >= 60) {
      message = 'üëç ¬°Bien hecho! Sigue practicando';
    } else {
      message = 'üí™ Necesitas m√°s pr√°ctica. ¬°No te rindas!';
    }

    this.testFeedback = `${message}\n\nPuntuaci√≥n: ${this.testSession.score}/${this.testSession.maxScore} (${percentage.toFixed(0)}%)`;
  }

  // Activar c√°mara para detecci√≥n de gestos
  startGestureCapture() {
    this.showCameraModal = true;
    this.cameraError = '';
    this.gestureDetected = false;

    navigator.mediaDevices.getUserMedia({ video: true })
      .then(stream => {
        this.cameraStream = stream;
        const videoElement = document.getElementById('cameraVideo') as HTMLVideoElement;
        if (videoElement) {
          videoElement.srcObject = stream;
        }
        
        // Simular detecci√≥n despu√©s de 8 segundos (m√°s tiempo para el usuario)
        setTimeout(() => {
          this.simulateGestureDetection();
        }, 8000);
      })
      .catch(error => {
        console.error('Error accessing camera:', error);
        this.cameraError = 'No se pudo acceder a la c√°mara. Verifica los permisos.';
      });
  }

  // Simular detecci√≥n de gesto (temporal)
  simulateGestureDetection() {
    this.gestureDetected = true;
    this.testFeedback = '‚úÖ ¬°Gesto detectado correctamente!';
    this.stopCamera();
    
    setTimeout(() => {
      this.showCameraModal = false;
      this.submitAnswer();
    }, 2500);
  }

  // Detener c√°mara
  stopCamera() {
    if (this.cameraStream) {
      this.cameraStream.getTracks().forEach(track => track.stop());
      this.cameraStream = null;
    }
  }

  // Cerrar modal de c√°mara
  closeCameraModal() {
    this.showCameraModal = false;
    this.stopCamera();
  }

  // Cerrar modal de prueba
  closeTestModal() {
    // Si la prueba est√° completada y se obtuvo 100%, marcar como completada
    if (this.testSession?.isCompleted && this.currentLesson) {
      const percentage = (this.testSession.score / this.testSession.maxScore) * 100;
      
      if (percentage === 100) {
        console.log(`üéâ ¬°Perfecto! Puntuaci√≥n del 100% en ${this.currentLesson.name}`);
        this.progressService.markLessonAsCompleted(this.currentLesson.id);
        
        // Mostrar mensaje de felicitaci√≥n
        setTimeout(() => {
          alert(`üèÜ ¬°EXCELENTE!\n\n¬°Has completado perfectamente la lecci√≥n de ${this.currentLesson?.name}!\n\n‚ú® Progreso guardado autom√°ticamente\nüîì Nuevas lecciones pueden estar disponibles`);
        }, 500);
      }
    }
    
    this.showTestModal = false;
    this.testSession = null;
    this.currentQuestion = null;
    this.showInlineVideo = false; // Cerrar video inline
    this.stopCamera();
  }

  // Abrir video inline en la pregunta
  openInlineVideo() {
    this.showInlineVideo = true;
    console.log('üì∫ Abriendo video inline en la pregunta actual');
    
    // Agregar efecto visual de apertura
    setTimeout(() => {
      if (this.showInlineVideo) {
        console.log('‚úÖ Video inline abierto correctamente');
      }
    }, 100);
  }

  // Cerrar video inline
  closeInlineVideo() {
    this.showInlineVideo = false;
    this.hasViewedReferenceVideo = true; // Marcar que se ha visto el video
    console.log('‚ùå Cerrando video inline - Video visto correctamente');
  }

  // Auto-mostrar video de referencia para preguntas de opci√≥n m√∫ltiple y matching
  autoShowReferenceVideo() {
    if (this.currentQuestion && 
        (this.currentQuestion.type === 'multiple-choice' || this.currentQuestion.type === 'matching') &&
        this.currentQuestion.referenceVideo) {
      
      this.showInlineVideo = true;
      console.log('üì∫ Auto-mostrando video de referencia para la pregunta actual');
      
      // Agregar efecto visual de apertura
      setTimeout(() => {
        if (this.showInlineVideo) {
          console.log('‚úÖ Video de referencia auto-abierto correctamente');
        }
      }, 100);
    }
  }

  // Verificar si se puede responder la pregunta actual
  canAnswerQuestion(): boolean {
    if (!this.currentQuestion) return false;
    
    // Para preguntas de gesto, siempre se puede responder
    if (this.currentQuestion.type === 'gesture') return true;
    
    // Para preguntas de opci√≥n m√∫ltiple y matching con video de referencia, 
    // se debe haber visto el video primero
    if ((this.currentQuestion.type === 'multiple-choice' || this.currentQuestion.type === 'matching') &&
        this.currentQuestion.referenceVideo) {
      return this.hasViewedReferenceVideo;
    }
    
    // Para preguntas sin video de referencia, siempre se puede responder
    return true;
  }

  // M√©todos para manejar diferentes tipos de video
  
  // Verificar si es URL de YouTube
  isYouTubeUrl(url: string): boolean {
    return url.includes('youtube.com') || url.includes('youtu.be');
  }
  
  // Verificar si es URL de MP4 (incluyendo videos locales en public)
  isMp4Url(url: string): boolean {
    return url.toLowerCase().endsWith('.mp4') || url.startsWith('/') && url.includes('.mp4');
  }
  
  // Verificar si es video local en carpeta public
  isLocalPublicVideo(url: string): boolean {
    return url.startsWith('/') && url.endsWith('.mp4') && !url.includes('http');
  }
  
  // Obtener URL segura para iframes
  getSafeUrl(url: string): SafeResourceUrl {
    return this.sanitizer.bypassSecurityTrustResourceUrl(url);
  }
  
  // Convertir URL de YouTube a formato embed
  getYouTubeEmbedUrl(url: string): string {
    let videoId = '';
    
    // Extraer ID del video de diferentes formatos de URL de YouTube
    if (url.includes('youtube.com/watch?v=')) {
      videoId = url.split('v=')[1].split('&')[0];
    } else if (url.includes('youtu.be/')) {
      videoId = url.split('youtu.be/')[1].split('?')[0];
    } else if (url.includes('youtube.com/embed/')) {
      return url; // Ya est√° en formato embed
    }
    
    return `https://www.youtube.com/embed/${videoId}`;
  }
  
  // Determinar el tipo de video autom√°ticamente
  getVideoType(url: string): 'youtube' | 'mp4' | 'other' {
    if (this.isYouTubeUrl(url)) {
      return 'youtube';
    } else if (this.isMp4Url(url)) {
      return 'mp4';
    } else {
      return 'other';
    }
  }

  ngOnDestroy() {
    // Limpiar recursos al destruir el componente
    this.stopCamera();
  }

  goBack() {
    this.router.navigate(['/basic-level']);
  }
}
